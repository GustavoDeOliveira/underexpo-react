/*
 * Swagger UnderExpo - OpenAPI 3.0
 * Definição OpenAPI 3.0 para a API do projeto UnderExpo.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: gustavo.oliveira@aluno.riogrande.ifrs.edu.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.47
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AtualizacaoElemento} from '../model/AtualizacaoElemento';
import {AtualizacaoExposicao} from '../model/AtualizacaoExposicao';
import {AtualizacaoExposicaoPaineis} from '../model/AtualizacaoExposicaoPaineis';
import {AtualizacaoPainel} from '../model/AtualizacaoPainel';
import {Exposicao} from '../model/Exposicao';
import {NovaDenuncia} from '../model/NovaDenuncia';
import {NovaExposicao} from '../model/NovaExposicao';
import {NovoPainel} from '../model/NovoPainel';
import {Painel} from '../model/Painel';
import {ResumoExposicao} from '../model/ResumoExposicao';

/**
* Exposio service.
* @module api/ExposicaoApi
* @version 0.0.1
*/
export class ExposicaoApi {

    /**
    * Constructs a new ExposicaoApi. 
    * @alias module:api/ExposicaoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the adicionarMiniaturaExposicao operation.
     * @callback moduleapi/ExposicaoApi~adicionarMiniaturaExposicaoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adicionar uma imagem de miniatura a uma exposição
     * Carrega uma nova imagem como miniatura para a exposição
     * @param {Object} body Imagem que será carregada como miniatura
     * @param {Number} expoId ID da exposição cuja miniatura será atualizada
     * @param {module:api/ExposicaoApi~adicionarMiniaturaExposicaoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adicionarMiniaturaExposicao(body, expoId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adicionarMiniaturaExposicao");
      }
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling adicionarMiniaturaExposicao");
      }

      let pathParams = {
        'expoId': expoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['underexpo_auth'];
      let contentTypes = ['image/png', 'image/jpeg'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/expo/{expoId}/miniatura', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the atualizarExposicao operation.
     * @callback moduleapi/ExposicaoApi~atualizarExposicaoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Alterar informações em uma exposição
     * Atualiza as informações de uma exposição. Também irá alterar a ordem dos paineis que forem informados
     * @param {module:model/AtualizacaoExposicao} body Conteúdos que serão atualizados na exposição. Campos não informados não serão alterados.
     * @param {String} nome 
     * @param {String} descricao 
     * @param {Array.<module:model/AtualizacaoExposicaoPaineis>} paineis 
     * @param {Number} expoId ID da exposição cujas informações serão atualizadas
     * @param {module:api/ExposicaoApi~atualizarExposicaoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    atualizarExposicao(body, nome, descricao, paineis, expoId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling atualizarExposicao");
      }
      // verify the required parameter 'nome' is set
      if (nome === undefined || nome === null) {
        throw new Error("Missing the required parameter 'nome' when calling atualizarExposicao");
      }
      // verify the required parameter 'descricao' is set
      if (descricao === undefined || descricao === null) {
        throw new Error("Missing the required parameter 'descricao' when calling atualizarExposicao");
      }
      // verify the required parameter 'paineis' is set
      if (paineis === undefined || paineis === null) {
        throw new Error("Missing the required parameter 'paineis' when calling atualizarExposicao");
      }
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling atualizarExposicao");
      }

      let pathParams = {
        'expoId': expoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'nome': nome,'descricao': descricao,'paineis': this.apiClient.buildCollectionParam(paineis, 'multi')
      };

      let authNames = ['underexpo_auth'];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/expo/{expoId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the atualizarPainel operation.
     * @callback moduleapi/ExposicaoApi~atualizarPainelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Alterar informações de um painel
     * Atualiza informações de um painel, assim como seus elementos.
     * @param {module:model/AtualizacaoPainel} body Informações a atualizar no painel.
Caso a propriedade &#x27;remover&#x27; de um elemento seja &#x27;true&#x27;,
o elemento com o id informado será removido do painel.
     * @param {String} nome 
     * @param {Array.<module:model/AtualizacaoElemento>} elementos 
     * @param {Number} expoId ID da exposição cujo painel a ser atualizado pertence
     * @param {Number} painelId ID do painel a ser atualizado
     * @param {module:api/ExposicaoApi~atualizarPainelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    atualizarPainel(body, nome, elementos, expoId, painelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling atualizarPainel");
      }
      // verify the required parameter 'nome' is set
      if (nome === undefined || nome === null) {
        throw new Error("Missing the required parameter 'nome' when calling atualizarPainel");
      }
      // verify the required parameter 'elementos' is set
      if (elementos === undefined || elementos === null) {
        throw new Error("Missing the required parameter 'elementos' when calling atualizarPainel");
      }
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling atualizarPainel");
      }
      // verify the required parameter 'painelId' is set
      if (painelId === undefined || painelId === null) {
        throw new Error("Missing the required parameter 'painelId' when calling atualizarPainel");
      }

      let pathParams = {
        'expoId': expoId,'painelId': painelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'nome': nome,'elementos': this.apiClient.buildCollectionParam(elementos, 'multi')
      };

      let authNames = ['api_key', 'underexpo_auth'];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/expo/{expoId}/painel/{painelId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the buscarExposicoesPublicadas operation.
     * @callback moduleapi/ExposicaoApi~buscarExposicoesPublicadasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResumoExposicao>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar exposições publicadas com paginação
     * Busca exposições que tenham sido disponibilizadas ao público, permitindo paginação.
     * @param {Number} pagina Página atual da busca
     * @param {Number} quantidade Quantidade de registros a serem buscados
     * @param {module:api/ExposicaoApi~buscarExposicoesPublicadasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    buscarExposicoesPublicadas(pagina, quantidade, callback) {
      
      let postBody = null;
      // verify the required parameter 'pagina' is set
      if (pagina === undefined || pagina === null) {
        throw new Error("Missing the required parameter 'pagina' when calling buscarExposicoesPublicadas");
      }
      // verify the required parameter 'quantidade' is set
      if (quantidade === undefined || quantidade === null) {
        throw new Error("Missing the required parameter 'quantidade' when calling buscarExposicoesPublicadas");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'pagina': pagina,'quantidade': quantidade
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['underexpo_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ResumoExposicao];

      return this.apiClient.callApi(
        '/expo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the carregarExposicaoPorId operation.
     * @callback moduleapi/ExposicaoApi~carregarExposicaoPorIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exposicao{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Carregar uma exposição a partir do seu ID
     * Retorna uma única exposição, com uma lista de painéis.
     * @param {Number} expoId ID da exposição a ser carregada
     * @param {module:api/ExposicaoApi~carregarExposicaoPorIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    carregarExposicaoPorId(expoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling carregarExposicaoPorId");
      }

      let pathParams = {
        'expoId': expoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'underexpo_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Exposicao;

      return this.apiClient.callApi(
        '/expo/{expoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the carregarPainelPorId operation.
     * @callback moduleapi/ExposicaoApi~carregarPainelPorIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Painel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Carregar um painel de uma exposição a partir de seus IDs
     * Retorna um único painel, com uma lista de seus elementos.
     * @param {Number} expoId ID da exposição cujo o painel a ser carregado pertence
     * @param {Number} painelId ID do painel a ser carregado
     * @param {module:api/ExposicaoApi~carregarPainelPorIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    carregarPainelPorId(expoId, painelId, callback) {
      
      let postBody = null;
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling carregarPainelPorId");
      }
      // verify the required parameter 'painelId' is set
      if (painelId === undefined || painelId === null) {
        throw new Error("Missing the required parameter 'painelId' when calling carregarPainelPorId");
      }

      let pathParams = {
        'expoId': expoId,'painelId': painelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'underexpo_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Painel;

      return this.apiClient.callApi(
        '/expo/{expoId}/painel/{painelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the criarPainel operation.
     * @callback moduleapi/ExposicaoApi~criarPainelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um painel em uma exposição
     * Cria um painel, e envia um convite para o artista informado.
     * @param {module:model/NovoPainel} body Informações do painel que será criado.
     * @param {String} autor 
     * @param {Number} expoId ID da exposição onde o painel será criado
     * @param {module:api/ExposicaoApi~criarPainelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    criarPainel(body, autor, expoId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling criarPainel");
      }
      // verify the required parameter 'autor' is set
      if (autor === undefined || autor === null) {
        throw new Error("Missing the required parameter 'autor' when calling criarPainel");
      }
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling criarPainel");
      }

      let pathParams = {
        'expoId': expoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'autor': autor
      };

      let authNames = ['api_key', 'underexpo_auth'];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/expo/{expoId}/painel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the denunciarExposicao operation.
     * @callback moduleapi/ExposicaoApi~denunciarExposicaoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Denunciar uma exposição a partir do seu ID
     * Cria uma denúncia associada a exposição com o ID informado
     * @param {module:model/NovaDenuncia} body Criar uma denúncia com uma descrição dos fatores ofensivos
     * @param {String} descricao 
     * @param {Number} expoId ID da exposição a ser denunciada
     * @param {module:api/ExposicaoApi~denunciarExposicaoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    denunciarExposicao(body, descricao, expoId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling denunciarExposicao");
      }
      // verify the required parameter 'descricao' is set
      if (descricao === undefined || descricao === null) {
        throw new Error("Missing the required parameter 'descricao' when calling denunciarExposicao");
      }
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling denunciarExposicao");
      }

      let pathParams = {
        'expoId': expoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'descricao': descricao
      };

      let authNames = ['api_key', 'underexpo_auth'];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/expo/{expoId}/denuncia', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the excluirPainel operation.
     * @callback moduleapi/ExposicaoApi~excluirPainelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remover um painel de uma exposição
     * Remove um único painel de uma exposição, somente se a exposição estiver em modo rascunho
     * @param {Number} expoId ID da exposição cujo o painel a ser removido pertence
     * @param {Number} painelId ID do painel a ser removido
     * @param {module:api/ExposicaoApi~excluirPainelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    excluirPainel(expoId, painelId, callback) {
      
      let postBody = null;
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling excluirPainel");
      }
      // verify the required parameter 'painelId' is set
      if (painelId === undefined || painelId === null) {
        throw new Error("Missing the required parameter 'painelId' when calling excluirPainel");
      }

      let pathParams = {
        'expoId': expoId,'painelId': painelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'underexpo_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/expo/{expoId}/painel/{painelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the organizarExposicao operation.
     * @callback moduleapi/ExposicaoApi~organizarExposicaoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Organizar uma nova exposição
     * Adiciona uma nova exposição em modo rascunho
     * @param {module:model/NovaExposicao} body Create a new pet in the store
     * @param {String} nome 
     * @param {String} descricao 
     * @param {module:api/ExposicaoApi~organizarExposicaoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organizarExposicao(body, nome, descricao, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organizarExposicao");
      }
      // verify the required parameter 'nome' is set
      if (nome === undefined || nome === null) {
        throw new Error("Missing the required parameter 'nome' when calling organizarExposicao");
      }
      // verify the required parameter 'descricao' is set
      if (descricao === undefined || descricao === null) {
        throw new Error("Missing the required parameter 'descricao' when calling organizarExposicao");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'nome': nome,'descricao': descricao
      };

      let authNames = ['underexpo_auth'];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/expo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removerExposicao operation.
     * @callback moduleapi/ExposicaoApi~removerExposicaoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remover uma exposição
     * Remove uma exposição e seus painéis. Pode ser feito apenas em exposições que não possuam painéis e estejam em modo rascunho.
     * @param {Number} expoId ID da exposição cujas informações serão atualizadas
     * @param {module:api/ExposicaoApi~removerExposicaoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removerExposicao(expoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling removerExposicao");
      }

      let pathParams = {
        'expoId': expoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['underexpo_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/expo/{expoId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removerMiniaturaExposicao operation.
     * @callback moduleapi/ExposicaoApi~removerMiniaturaExposicaoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remover a imagem de miniatura de uma exposição
     * Remove a imagem de miniatura da exposição, caso possua
     * @param {Number} expoId ID da exposição cuja miniatura será removida
     * @param {module:api/ExposicaoApi~removerMiniaturaExposicaoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removerMiniaturaExposicao(expoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'expoId' is set
      if (expoId === undefined || expoId === null) {
        throw new Error("Missing the required parameter 'expoId' when calling removerMiniaturaExposicao");
      }

      let pathParams = {
        'expoId': expoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['underexpo_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/expo/{expoId}/miniatura', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}