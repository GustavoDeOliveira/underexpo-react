/*
 * Swagger UnderExpo - OpenAPI 3.0
 * Definição OpenAPI 3.0 para a API do projeto UnderExpo.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: gustavo.oliveira@aluno.riogrande.ifrs.edu.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AtualizacaoUsuario from '../model/AtualizacaoUsuario';
import CriacaoUsuario from '../model/CriacaoUsuario';
import Usuario from '../model/Usuario';

/**
* Usuario service.
* @module api/UsuarioApi
* @version 0.0.1
*/
export default class UsuarioApi {

    /**
    * Constructs a new UsuarioApi. 
    * @alias module:api/UsuarioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the atualizarUsuario operation.
     * @callback moduleapi/UsuarioApi~atualizarUsuarioCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Editar usuario
     * Altera o nome do usuario
     * @param {module:model/AtualizacaoUsuario} body Informações a atualizar no usuário.
     * @param {String} nome 
     * @param {Number} id ID do usuario a ser editado
     * @param {module:api/UsuarioApi~atualizarUsuarioCallback} callback The callback function, accepting three arguments: error, data, response
     */
    atualizarUsuario(body, nome, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling atualizarUsuario");
      }
      // verify the required parameter 'nome' is set
      if (nome === undefined || nome === null) {
        throw new Error("Missing the required parameter 'nome' when calling atualizarUsuario");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling atualizarUsuario");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'nome': nome
      };

      let authNames = ['underexpoAuth'];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/usuario/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the criarUsuario operation.
     * @callback moduleapi/UsuarioApi~criarUsuarioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Usuario{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar usuario
     * Cadastra um novo usuario na plataforma.
     * @param {Object} opts Optional parameters
     * @param {module:model/CriacaoUsuario} opts.body Objeto do usuario criado
     * @param {String} opts.chave 
     * @param {String} opts.nome 
     * @param {module:api/UsuarioApi~criarUsuarioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    criarUsuario(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'chave': opts['chave'],'nome': opts['nome']
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Usuario;

      return this.apiClient.callApi(
        '/usuario', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the obterUsuario operation.
     * @callback moduleapi/UsuarioApi~obterUsuarioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Usuario{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar usuario
     * Busca pelo usuario para entrada na plataforma.
     * @param {String} chave A chave do usuario
     * @param {module:api/UsuarioApi~obterUsuarioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    obterUsuario(chave, callback) {
      
      let postBody = null;
      // verify the required parameter 'chave' is set
      if (chave === undefined || chave === null) {
        throw new Error("Missing the required parameter 'chave' when calling obterUsuario");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'chave': chave
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = Usuario;

      return this.apiClient.callApi(
        '/usuario', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sairUsuario operation.
     * @callback moduleapi/UsuarioApi~sairUsuarioCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * desconecta o usuario da sessao atual
     * @param {Number} id ID do usuario a ser desconectado
     * @param {module:api/UsuarioApi~sairUsuarioCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sairUsuario(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sairUsuario");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['underexpoAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/usuario/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}